import {ActivityIndicator, Image, TextInput,ScrollView, StyleSheet } from 'react-native';
import Button from '@/components/Button';
import React,{useState}from "react";
import Svg, {
  Circle,
  // SvgUri,
  // SvgCssUri,
  Ellipse,
  G,
  TSpan,
  TextPath,
  Path,
  Polygon,
  Polyline,
  Line,
  Rect,
  Use,
  Symbol,
  Defs,
  LinearGradient,
  RadialGradient,
  Stop,
  ClipPath,
  Pattern,
  Mask,
} from 'react-native-svg';
import EditScreenInfo from '@/components/EditScreenInfo';
import { Text, View } from '@/components/Themed';
import {SvgCssUri} from 'react-native-svg/css';




import * as ImagePicker from 'expo-image-picker';

import ImageViewer from "../../components/ImageViewer";
import IconButton from "@/components/CircleButton";


const Heathimprove= require("../../assets/images/healthimprove.png");
const Brainwave= require("../../assets/images/brainwave.png");
const Sleepdata= require("../../assets/images/sleepdata.png");


export default function TabOneScreen(props) {



 const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      console.log(result);
    } else {
      alert('You did not select any image.');
    }
  };


  const [selectedImage, setSelectedImage] = useState(null);


{
  //   const onReset2 = (img) => {
  //   setSelectedImage(Brainwave);
  // };
  // const onReset3 = (img) => {
  //   setSelectedImage(Heathimprove);
  // };
  // const onReset = (img) => {
  //   setSelectedImage(Sleepdata);
  // };
}
  return (

        <View style={styles.cloumn}>

         <View style={{ padding: 10 }}>
{
        // <ImageViewer
        //   placeholderImageSource={selectedImage ? selectedImage : Heathimprove}
        // />
}        
{
        // <View style={styles.row}>
        //     <IconButton icon="refresh" label="睡眠数据" onPress={onReset} />
        //     <IconButton icon="refresh" label="脑电波图形" onPress={onReset2} />
        //     <IconButton icon="refresh" label="睡眠改善效果" onPress={onReset3} />
        // </View>
}
        </View>
    
      <View style={styles.container}>
            <IconButton icon="refresh" label="睡眠改善效果" onPress={pickImageAsync} />
      </View>

          <TextInput
            style={{ height: 100,width:300, borderColor: 'gray', borderWidth: 1, padding: 5 }}
            placeholder="询问关于你的个性化睡眠建议"
            editable={true}
          />
          <TextInput
            style={{ height: 100,width:300, borderColor: 'gray', borderWidth: 1, padding: 5 }}
            placeholder="AI响应将出现在这里..."
            editable={false}
          />


        </View>
      
    );


}

const styles = StyleSheet.create({
  row: {
    padding: 20 ,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginVertical: 10,
  },

cloumn: {
    padding: 30,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginVertical: 10,
},

  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  separator: {
    height: 400,
    width: '100%',
  },
  imageContainer: {
    flex: 1,
    paddingTop: 58,
  },

  image: {
    width: 320,
    height: 440,
    borderRadius: 18,
  },

  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
import React from 'react';
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { Link, Tabs } from 'expo-router';
import { Pressable } from 'react-native';
import Colors from '@/constants/Colors';
import { useColorScheme } from '@/components/useColorScheme';
import { useClientOnlyValue } from '@/components/useClientOnlyValue';

// You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/
function TabBarIcon(props: {
  name: React.ComponentProps<typeof FontAwesome>['name'];
  color: string;
}) {
  return <FontAwesome size={28} style={{ marginBottom: -3 }} {...props} />;
}

export default function TabLayout() {
  const colorScheme = useColorScheme();

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: Colors[colorScheme ?? 'light'].tint,
        // Disable the static render of the header on web
        // to prevent a hydration error in React Navigation v6.
        headerShown: useClientOnlyValue(false, true),
      }}>



      <Tabs.Screen
        name="index"
        options={{
          title: '数据中心',
          tabBarIcon: ({ color }) => <TabBarIcon name="heart" color={color} />,
          headerRight: () => (
            <Link href="/help/data" asChild>
              <Pressable>
                {({ pressed }) => (
                  <FontAwesome
                    name="info-circle"
                    size={25}
                    color={Colors[colorScheme ?? 'light'].text}
                    style={{ marginRight: 15, opacity: pressed ? 0.5 : 1 }}
                  />
                )}
              </Pressable>
            </Link>
          ),
        }}
      />
      <Tabs.Screen
        name="two"
        options={{
          title: '光音控制',
          tabBarIcon: ({ color }) => <TabBarIcon name="th-list" color={color} />,
          headerRight: () => (
            <Link href="/help/ctrl" asChild>
              <Pressable>
                {({ pressed }) => (
                  <FontAwesome
                    name="info-circle"
                    size={25}
                    color={Colors[colorScheme ?? 'light'].text}
                    style={{ marginRight: 15, opacity: pressed ? 0.5 : 1 }}
                  />
                )}
              </Pressable>
            </Link>
          ),

        }}
      />


      <Tabs.Screen
        name="three"
        options={{
          title: '用户中心',
          tabBarIcon: ({ color }) => <TabBarIcon name="user" color={color} />,
          headerRight: () => (
            <Link href="/help/user" asChild>
              <Pressable>
                {({ pressed }) => (
                  <FontAwesome
                    name="info-circle"
                    size={25}
                    color={Colors[colorScheme ?? 'light'].text}
                    style={{ marginRight: 15, opacity: pressed ? 0.5 : 1 }}
                  />
                )}
              </Pressable>
            </Link>
          ),

        }}
      />
      <Tabs.Screen
        name="four"
        options={{
          title: 'test',
          tabBarIcon: ({ color }) => <TabBarIcon name="th-list" color={color} />,
          headerRight: () => (
            <Link href="/help/ctrl" asChild>
              <Pressable>
                {({ pressed }) => (
                  <FontAwesome
                    name="info-circle"
                    size={25}
                    color={Colors[colorScheme ?? 'light'].text}
                    style={{ marginRight: 15, opacity: pressed ? 0.5 : 1 }}
                  />
                )}
              </Pressable>
            </Link>
          ),

        }}
      />


    </Tabs>
  );
}
import { StyleSheet } from 'react-native';

import EditScreenInfo from '@/components/EditScreenInfo';
import { Text, View } from '@/components/Themed';
import {React,useState}from "react";
import {
  SafeAreaView,
  Image,
  TouchableOpacity,
  TextInput,
} from "react-native";
import { StatusBar } from "expo-status-bar";
import LogoBannerImage from "../../assets/login-page/logo.png";
import RegisterForm from "../../components/RegisterForm";



export default function TabThreeScreen() {
  const [showAppOptions, setShowAppOptions] = useState(false);


  return (
    <>

      <StatusBar style="light" />

      {/* https://reactnative.dev/docs/image */}
      {showAppOptions ?(
        <RegisterForm setShowAppOptions={setShowAppOptions} />
        ):(
      <SafeAreaView style={styles.container}>
      <Image source={LogoBannerImage} style={styles.banner} />
        <View style={styles.content}>
          <TextInput
            style={[styles.input, styles.inputUsername]}
            placeholder="电话号码或电子邮件"
            placeholderTextColor="#cdcdcf"
          />

          <TextInput
            style={[styles.input, styles.inputPassword]}
            secureTextEntry={true}
            placeholder="密码"
            placeholderTextColor="#cdcdcf"
          />

          <TouchableOpacity style={styles.button}>
            <Text style={styles.buttonText}>登录</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.link}>
            <Text style={styles.linkText}>忘记密码？</Text>
          </TouchableOpacity>

        </View>

        <View style={styles.footer}>
          <View style={styles.divider}>
            <View style={styles.dividerLine} />
            <Text style={styles.dividerText}>或者</Text>
            <View style={styles.dividerLine} />
          </View>

                <TouchableOpacity style={[styles.button, styles.buttonRegister]} onPress={()=>setShowAppOptions(true)}>
                  <Text style={[styles.buttonText, styles.buttonRegisterText]}>
                    创建新账号
                  </Text>
                </TouchableOpacity>
        

        </View>
      </SafeAreaView>
              )}
    </>
  );

}

const styles = StyleSheet.create({
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  separator: {
    marginVertical: 30,
    height: 1,
    width: '80%',
  },

banner: {
    resizeMode: "contain",
    width: "100%",
    height: null,
    aspectRatio: 750 / 460, // Image ratio
  },
  container: {
    flex: 1,
    justifyContent: "space-between",
  },
  content: {
    padding: 22,
  },
  input: {
    borderWidth: 1,
    borderColor: "#cdcdcf",
    color: "#333333",
    fontSize: 16,
    height: 44,
    paddingHorizontal: 15,
  },
  inputUsername: {
    borderBottomWidth: 0,
    borderTopLeftRadius: 3,
    borderTopRightRadius: 3,
  },
  inputPassword: {
    borderBottomLeftRadius: 3,
    borderBottomRightRadius: 3,
  },
  button: {
    height: 42,
    borderRadius: 6,
    backgroundColor: "#1977f3",
    justifyContent: "center",
    marginVertical: 15,
  },
  buttonText: {
    color: "#b4cafb",
    textAlign: "center",
    fontSize: 16,
  },
  link: {
    paddingVertical: 8,
  },
  linkText: {
    color: "#1c6ede",
    textAlign: "center",
    fontSize: 16,
    fontWeight: "500",
  },
  footer: {
    alignItems: "center",
    padding: 22,
    paddingBottom: 0,
  },
  divider: {
    flexDirection: "row",
    alignItems: "center",
    width: "70%",
    marginBottom: 10,
  },
  dividerLine: {
    flex: 1,
    borderBottomWidth: 1,
    borderColor: "#cbccd0",
  },
  dividerText: {
    width: 50,
    textAlign: "center",
  },
  buttonRegister: {
    width: "100%",
    backgroundColor: "#e7f3ff",
  },
  buttonRegisterText: {
    color: "#1077f7",
  },

});
import React from 'react';
import { StyleSheet, ScrollView, View, Text } from 'react-native';
import Button from '@/components/Button';
import Slider from '@react-native-community/slider';

export default function TabTwoScreen() {
  const [lightIntensity, setLightIntensity] = React.useState(50);
  const [soundVolume, setSoundVolume] = React.useState(50);
  const [pulseFrequency, setPulseFrequency] = React.useState(1);
  const [pulseDuration, setPulseDuration] = React.useState(30);
  const [isLightEnabled, setIsLightEnabled] = React.useState(false);
  const [isSoundEnabled, setIsSoundEnabled] = React.useState(false);
  const [isPulseEnabled, setIsPulseEnabled] = React.useState(false);
  const [colorTemperature,setColorTemperature]= React.useState(1);
  const [gradientIntensity,setGradientIntensity]= React.useState(1);

  return (
<ScrollView contentContainerStyle={styles.scrollContainer}>
    <View style={styles.container}>
        <Text style={styles.title}>通用</Text>
        
        <View style={styles.row}>
            <Button label="助眠模式" theme="primary" />
            <Button label="设定时间" theme="primary" />
        </View>

        <View style={styles.row}>
            <Button label="用户偏好设置" theme="primary" />
            <Button label="日程表" theme="primary" />
        </View>

        <View style={styles.separator} lightColor="#eee" darkColor="rgba(255,255,255,0.1)" />
        
        <Text style={styles.title}>光调节</Text>
        
        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={lightIntensity}
                onValueChange={(value) => setLightIntensity(value)}
            />
            <Text>亮度调节</Text>
        </View>

        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={colorTemperature}
                onValueChange={(value) => setColorTemperature(value)}
            />
            <Text>颜色温度</Text>
        </View>

        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={gradientIntensity}
                onValueChange={(value) => setGradientIntensity(value)}
            />
            <Text>渐变设置</Text>
        </View>

        <View style={styles.separator} lightColor="#eee" darkColor="rgba(255,255,255,0.1)" />
        
        <Text style={styles.title}>音调节</Text>
        
        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={soundVolume}
                onValueChange={(value) => setSoundVolume(value)}
            />
            <Text>音量调节</Text>
        </View>
        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={soundVolume}
                onValueChange={(value) => setSoundVolume(value)}
            />
            <Text>音乐选择</Text>
        </View>
        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={soundVolume}
                onValueChange={(value) => setSoundVolume(value)}
            />
            <Text>定时关闭</Text>
        </View>

        <Text style={styles.title}>脉冲调节</Text>

        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={soundVolume}
                onValueChange={(value) => setSoundVolume(value)}
            />
            <Text>频率控制</Text>
        </View>
        <View style={styles.row}>
            <Slider
                style={{ width: 200 }}
                minimumValue={0}
                maximumValue={100}
                value={soundVolume}
                onValueChange={(value) => setSoundVolume(value)}
            />
            <Text>强度设置</Text>
        </View>


        <View style={styles.row}>
            <Button label="模式选择" theme="primary" />
        </View>

      <View style={styles.row}>
          <Text>频率</Text>
      </View>
      <View style={styles.row}>
          <Text>低频 </Text>
          <Slider
              style={{ width: 200 }}
              minimumValue={1}
              maximumValue={10}
              value={pulseFrequency}
              onValueChange={(value) => setPulseFrequency(value)}
          />
          <Text>高频</Text>
      </View>
    </View>
</ScrollView>  );
}

const styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginVertical: 10,
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  separator: {
    marginVertical: 30,
    height: 1,
    width: '80%',
  },

  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
n
